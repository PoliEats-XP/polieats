// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  Order         Order[]
  notifications Notification[] @relation("UserNotifications")

  role       String?
  banned     Boolean?
  banReason  String?
  banExpires DateTime?

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Order {
  id            String         @id @default(uuid())
  userId        String
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  status        OrderStatus    @default(PENDING)
  totalPrice    Decimal
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  items         OrderItem[]
  paymentMethod PaymentMethod?
  notifications Notification[] @relation("OrderNotifications")

  // Feedback fields
  rating     Int? // 0-5 stars, null if no feedback given
  feedback   String? // Optional feedback comment
  feedbackAt DateTime? // When feedback was submitted

  @@map("order")
}

model OrderItem {
  id       String  @id @default(uuid())
  orderId  String
  order    Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  itemId   String?
  item     Item?   @relation(fields: [itemId], references: [id], onDelete: SetNull)
  name     String
  quantity Int
  price    Decimal

  @@map("order_item")
}

model Item {
  id       String      @id @default(uuid())
  name     String      @unique
  price    Decimal
  quantity Int
  orders   OrderItem[]

  @@map("item")
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  PIX
  INDEFINIDO
}

model Notification {
  id        String           @id @default(uuid())
  userId    String
  user      User             @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
  title     String
  message   String
  type      NotificationType @default(ORDER_UPDATE)
  read      Boolean          @default(false)
  orderId   String? // Reference to the order that triggered this notification
  order     Order?           @relation("OrderNotifications", fields: [orderId], references: [id], onDelete: SetNull)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@map("notification")
}

enum NotificationType {
  ORDER_UPDATE
  GENERAL
}
